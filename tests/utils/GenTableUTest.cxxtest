/** behave_bg_cscoreUTest.cxxtest ---
 *
 * Copyright (C) 2021 SingularityNET Foundation
 *
 * Author: Abdulrahman Semrie <hsamireh@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <cxxtest/TestSuite.h>
#include <iostream>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/asmoses/combo/combo/combo.h>
#include <opencog/asmoses/combo/combo/iostream_combo.h>
#include <opencog/asmoses/data/table/table.h>
#include <opencog/asmoses/data/table/table_io.h>
#include <string>
#include "opencog/asmoses/utils/generate_table.h"

using namespace opencog;
using namespace std;
using namespace opencog::combo;

const string utest_dir = string(PROJECT_SOURCE_DIR) + "/tests/utils/";
const string target_feature = "out";

class GenTableUTest : public CxxTest::TestSuite
{
private:
    AtomSpace _as;

public:
    void setUp();

    void tearDown();

    void load_scm_file(const string& path, SchemeEval& eval);

    void test_gen_table();
};

void GenTableUTest::setUp() {
    _as.clear();
}

void GenTableUTest::tearDown() {}

void GenTableUTest::load_scm_file(const string &path, SchemeEval& eval)
{
    eval.eval("");
    eval.eval(string("(add-to-load-path \"") + utest_dir + string("\")"));
    string rv = eval.eval("(use-modules (opencog))");
    TS_ASSERT(not eval.eval_error());

    rv = eval.eval(string("(load-from-path \"") + path + string("\")"));
    cout << "Result from loading file is %s\n" << rv << endl;
    TS_ASSERT(not eval.eval_error());
}

void GenTableUTest::test_gen_table()
{
    Table tt;
    SchemeEval eval(&_as);
    load_scm_file("test.scm", eval);

    std::vector<string> labels = {"f1", "f2", "f3", "f4", "f5"};
    string combo_str_1 = "and($1 $2 and($3 $4) !$5)";
    combo_tree tr1 = str2combo_tree(combo_str_1, {});

    unsigned num_samples = 50;

    gen_table(tr1, &_as, tt, labels, num_samples);
    tt.itable.set_labels(labels);
    tt.otable.set_label("out");

    TS_ASSERT(tt.size() == num_samples);
    ofstream out_table(utest_dir + "out.csv");
    ostreamTable(out_table, tt);
    cout << "Table size: " << tt.size() << endl;

    cout << tt << endl;

}
